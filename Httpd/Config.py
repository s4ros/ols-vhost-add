from .Parser import Parser
from .VHost import VHost
import os
import config
import subprocess
import logging

class Config:
    def __init__(self):
        self.__create_backup()
        self.config = Parser(config.httpd_conf_path)

    def __create_backup(self):
        with open(config.httpd_conf_path, "r") as f:
            with open(f"{config.httpd_conf_path}.bak", "w") as b:
                b.write(f.read())

    def generate(self):
        local_config = self.config.httpd_config.copy()
        specials = {
            "accessDenyDir": local_config.pop("accessDenyDir"),
            "extprocessors": local_config.pop("extprocessors"),
            "vhosts": local_config.pop("vhosts"),
            "listener HTTP": local_config.pop("listener HTTP"),
            "global": local_config.pop("global"),
        }
        CONFIG = "# CONFIG GENERATED BY VHOST-SETUP.PY\n"
        CONFIG += "# DO NOT EDIT THIS FILE MANUALLY\n\n"
        # global config
        for key, value in specials["global"].items():
            CONFIG += f"{key:<{25}} {' '.join(value)}\n"
        # accessdenydir config
        CONFIG += "\n"
        CONFIG += "accessDenyDir {\n"
        for key, value in specials["accessDenyDir"].items():
            for dir in value:
                CONFIG += f"    dir        {dir[0]}\n"
        CONFIG += "}\n"
        # rest of the config
        for block, items in local_config.items():
            CONFIG += f"\n{block} {{\n"
            for key, value in items.items():
                CONFIG += f"    {key:<{25}} {' '.join(value)}\n"
            CONFIG += "}\n"
        # extprocessor config
        for extprocessor in specials["extprocessors"]:
            for key, value in extprocessor.items():
                CONFIG += f"\nextprocessor {str(key)} {{\n"
                for k, v in value.items():
                    CONFIG += f"    {k:<{20}} {v[0]}\n"
                CONFIG += "}\n"
        # virtualhost config
        for vhost in specials["vhosts"]:
            for key, value in vhost.items():
                CONFIG += f"\nvirtualHost {key} {{\n"
                for k, v in value.items():
                    CONFIG += f"    {k:<{20}} {v[0]}\n"
                CONFIG += "}\n"
        # listener config
        CONFIG += "\nlistener HTTP {\n"
        for key, value in specials["listener HTTP"].items():
            if key == "maps":
                for item in value:
                    CONFIG += f"    map {item['vhost']:<{25}} {', '.join(item['domains'])}\n"
            else:
                CONFIG += f"    {key:<{20}} {value[0]}\n"
        CONFIG += "}\n"
        return CONFIG

    def add_vhost(self, vhost_name, domains):
        domains = domains.strip().split(",")
        self.vhost = VHost(vhost_name, domains)
        self.config.httpd_config["listener HTTP"]["maps"].append(self.vhost.generate_map())
        self.config.httpd_config["vhosts"].append(self.vhost.generate_vhost())

    def __set_permissions(self):
        os.system(f"sudo chown -R {config.lsadm_uid}:{config.lsadm_gid} {config.services_dir}")
        os.system(f"sudo chown -R {config.lsadm_uid}:{config.lsadm_gid} {config.vhost_dir}")
        os.system(f"sudo chown -R {config.lsadm_uid}:{config.lsadm_gid} {config.vhost_conf_dir}")

    def __str__(self) -> str:
        return str(self.config)

    def save_config(self):
        with open(self.config.path, "w") as f:
            f.write(self.generate())
        self.vhost.save_config()
        self.__set_permissions()

    def restart(self):
        # os.system(f"docker exec litespeed /usr/local/lsws/bin/lswsctrl restart")
        r = subprocess.run(["docker", "exec", "litespeed", "/usr/local/lsws/bin/lswsctrl", "restart"],
                    capture_output=True,)
        if r.returncode != 0:
            logging.error(r.stderr)